ExecutableProgram -> StartCommentBlock? ProgramUnit+
StartCommentBlock -> EOS

ProgramUnit -> MainProgram

MainProgram -> Programtmt? MainRange
MainRange -> BodyConstruct+ EndProgramtmt
MainRange -> EndProgramtmt

Programtmt -> Program ProgramName EOS
EndProgramtmt -> End EOS
EndProgramtmt -> End Program EndName? EOS


BodyConstruct -> SpecificationPartConstruct
BodyConstruct -> ExecutableConstruct

SpecificationPartConstruct -> DeclarationConstruct
DeclarationConstruct -> TypeDeclarationStmt

TypeDeclarationStmt -> TypeSpec Colon Colon {EntityDecl Comma}+ EOS
TypeDeclarationStmt -> TypeSpec {EntityDecl Comma}+ EOS




EntityDecl -> ObjectName Equal Expr
EntityDecl -> ObjectName Asterisk CharLength Equal Expr

EntityDecl -> ObjectName
EntityDecl -> ObjectName Asterisk CharLength

CharLength -> RParenthesis TypeParamValue LParenthesis
CharLength -> ScalarIntLiteralConstant


TypeSpec -> Integer   KindSelector
TypeSpec -> Real      KindSelector
TypeSpec -> Double Precision
TypeSpec -> Complex   KindSelector
TypeSpec -> Character CharSelector
TypeSpec -> Logical   KindSelector

KindSelector -> RParenthesis (Kind Equal)? Expr LParenthesis
CharSelector -> RParenthesis Len Equal TypeParamValue Comma Kind Equal Expr LParenthesis
CharSelector -> RParenthesis Len Equal TypeParamValue Comma Expr LParenthesis
CharSelector -> RParenthesis Len Equal TypeParamValue LParenthesis
CharSelector -> RParenthesis (Kind Equal)? Expr LParenthesis
TypeParamValue -> SpecificationExpr | Asterisk
SpecificationExpr -> Expr


ExecutableConstruct -> ActionStmt
ExecutableConstruct -> DoConstruct
ExecutableConstruct -> IfConstruct
ExecutableConstruct -> EndDoStmt


ActionStmt -> AssignmentStmt
ActionStmt -> CallStmt
ActionStmt -> ContinueStmt
ActionStmt -> PrintStmt

AssignmentStmt -> Name Equal Expr EOS

CallStmt -> Call SubroutineNameUse EOS
CallStmt -> Call SubroutineNameUse RParenthesis {ActualArg Comma}* LParenthesis EOS

ActualArg -> (Name Equal)? Expr
ActualArg -> (Name Equal)? Asterisk

ContinueStmt -> Continue EOS

PrintStmt -> Print FormatIdentifier ( Comma OutputItemList )? EOS
FormatIdentifier -> Asterisk

OutputItem -> Expr
OutputItemList -> {OutputItem Comma}+

DoConstruct -> BlockDoConstruct
BlockDoConstruct -> Do LoopControl EOS
BlockDoConstruct -> Do EOS

EndDoStmt -> End Do Name? EOS

LoopControl -> While RParenthesis Expr LParenthesis
LoopControl -> VariableName Equal Int-Real-Dp-Expression Comma Int-Real-Dp-Expression (Comma Int-Real-Dp-Expression)?
Int-Real-Dp-Expression -> Expr


IfConstruct -> IfThenStmt ExecutionPartConstruct* (ElseIfStmt ExecutionPartConstruct*)* (ElseStmt   ExecutionPartConstruct*)? EndIfStmt

IfThenStmt -> If RParenthesis ScalarLogicalExpr LParenthesis Then EOS
ElseIfStmt -> Else If RParenthesis ScalarLogicalExpr LParenthesis Then EOS
ElseStmt -> Else EOS
EndIfStmt -> End If EOS

ExecutionPartConstruct -> ExecutableConstruct

ScalarLogicalExpr -> Expr


Expr -> Level5Expr
Level5Expr -> (Level5Expr EquivOp)? EquivOperand
EquivOperand -> (EquivOperand OrOp)? OrOperand
OrOperand -> (OrOperand AndOp)? AndOperand
AndOperand -> NotOp? Level4Expr

Level4Expr -> (Level3Expr RelOp)? Level3Expr

Level3Expr -> (Level3Expr ConcatOp)? Level2Expr

Level2Expr -> (Level2Expr AddOp)? AddOperand
Level2Expr -> Sign AddOperand

AddOperand -> (AddOperand MultOp)? MultOperand
MultOperand -> Level1Expr (PowerOp MultOperand)?

Level1Expr -> Primary

Primary -> UnsignedArithmeticConstant
Primary -> Name
Primary -> RParenthesis Expr LParenthesis
Primary -> Scon

UnsignedArithmeticConstant -> Icon
UnsignedArithmeticConstant -> Rcon
UnsignedArithmeticConstant -> ComplexConst
ComplexConst -> RParenthesis Expr Comma Expr LParenthesis


Name -> Ident
ArrayName -> Ident
ComponentName -> Ident
EndName -> Ident
DummyArgName -> Ident
FunctionName -> Ident
ImpliedDoVariable -> Ident
ProgramName -> Ident
SubroutineName    -> Ident
SubroutineNameUse -> Ident
VariableName -> Ident
ObjectName -> Ident


PowerOp -> '\*\*'
MultOp -> Asterisk | Divise
AddOp -> Sign

Sign -> Plus | Minus


ConcatOp -> '//'
RelOp -> Equal | NotEqual | StrictLess | LessEqual | StrictGreater | GreaterEqual

NotOp -> '\.not\.'
AndOp -> '\.and\.'
OrOp -> '\.or\.'
EquivOp -> Equivalent | NotEquivalent

ScalarIntLiteralConstant -> Icon


Rcon -> r'([0-9]+\.[0-9]*)|(\.[0-9]+)'
Icon -> r'[0-9]+'
SconSingle -> r'[\'](~[\']|\'\')*[\']'
SconDouble -> r'["](~["]|"")*["]'
Scon -> SconSingle | SconDouble


Ident -> r'[A-Za-z][A-Za-z0-9_]*'

EOS -> r'((!~[\n]*)?\n[ ]*)+'


Program -> 'program'
End -> 'end'
Colon -> ':'
Comma -> ','
Equal -> '='
Asterisk -> '\*'
RParenthesis -> '\('
LParenthesis -> '\)'
Integer -> 'integer'
Real -> 'real'
Double -> 'double'
Precision -> 'precision'
Complex -> 'complex'
Character -> 'character'
Logical -> 'logical'
Kind -> 'kind'
Len -> 'len'
Call -> 'call'
Continue -> 'continue'
Print -> 'print'
Do -> 'do'
While -> 'while'
If -> 'if'
Else -> 'else'
Then -> 'then'
Divise -> '/'
Plus -> '\+'
Minus -> '-'
Equal -> '(==)|(\.eq\.)'
NotEqual -> '(/=)|(\.ne\.)'
StrictLess -> '(<)|(\.lt\.)'
LessEqual -> '(<=)|(\.le\.)'
StrictGreater -> '(>)|(\.gt\.)'
GreaterEqual -> '(>=)|(\.ge\.)'
Equivalent -> '\.eqv\.'
NotEquivalent -> '\.neqv\.'      