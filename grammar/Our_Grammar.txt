StartCommentBlock? ProgramUnit+       -> ExecutableProgram
EOS                                   -> StartCommentBlock

MainProgram                           -> ProgramUnit

Programtmt? MainRange                 -> MainProgram
BodyConstruct+ EndProgramtmt          -> MainRange
EndProgramtmt                         -> MainRange

Program ProgramName EOS               -> Programtmt
End EOS                               -> EndProgramtmt
End Program EndName? EOS              -> EndProgramtmt


SpecificationPartConstruct            -> BodyConstruct
ExecutableConstruct                   -> BodyConstruct

DeclarationConstruct                  -> SpecificationPartConstruct
TypeDeclarationStmt                   -> DeclarationConstruct

TypeSpec Colon Colon {EntityDecl Comma}+ EOS         -> TypeDeclarationStmt
TypeSpec {EntityDecl Comma}+ EOS                     -> TypeDeclarationStmt




ObjectName Equal Expr                                   -> EntityDecl
ObjectName Asterisk CharLength Equal Expr               -> EntityDecl

ObjectName                                              -> EntityDecl
ObjectName Asterisk CharLength                          -> EntityDecl

RParenthesis TypeParamValue LParenthesis        -> CharLength
ScalarIntLiteralConstant                        -> CharLength


Integer   KindSelector      -> TypeSpec
Real      KindSelector      -> TypeSpec
Double Precision            -> TypeSpec
Complex   KindSelector      -> TypeSpec
Character CharSelector      -> TypeSpec
Logical   KindSelector      -> TypeSpec

RParenthesis (Kind Equal)? Expr LParenthesis                              -> KindSelector
RParenthesis Len Equal TypeParamValue Comma Kind Equal Expr LParenthesis  -> CharSelector
RParenthesis Len Equal TypeParamValue Comma Expr LParenthesis             -> CharSelector
RParenthesis Len Equal TypeParamValue LParenthesis                        -> CharSelector
RParenthesis (Kind Equal)? Expr LParenthesis                              -> CharSelector
SpecificationExpr | Asterisk       -> TypeParamValue
Expr -> SpecificationExpr


ActionStmt                    -> ExecutableConstruct
DoConstruct                   -> ExecutableConstruct
IfConstruct                   -> ExecutableConstruct
EndDoStmt                     -> ExecutableConstruct


AssignmentStmt                -> ActionStmt
CallStmt                      -> ActionStmt
ContinueStmt                  -> ActionStmt
PrintStmt                     -> ActionStmt

Name Equal Expr EOS           -> AssignmentStmt

Call SubroutineNameUse EOS                                               -> CallStmt
Call SubroutineNameUse RParenthesis {ActualArg Comma}* LParenthesis EOS  -> CallStmt

(Name Equal)? Expr               -> ActualArg
(Name Equal)? Asterisk           -> ActualArg

Continue EOS                        -> ContinueStmt

Print FormatIdentifier ( Comma OutputItemList )? EOS   -> PrintStmt
Asterisk                  -> FormatIdentifier

Expr                                    -> OutputItem
{OutputItem Comma}+                     -> OutputItemList

BlockDoConstruct                             -> DoConstruct
Do LoopControl EOS                           -> BlockDoConstruct
Do EOS                                       -> BlockDoConstruct

End Do Name? EOS                             -> EndDoStmt

While RParenthesis Expr LParenthesis                                                                        -> LoopControl
VariableName Equal Int-Real-Dp-Expression Comma Int-Real-Dp-Expression (Comma Int-Real-Dp-Expression)?      -> LoopControl
Expr                                                  -> Int-Real-Dp-Expression


IfThenStmt ExecutionPartConstruct* 
       (ElseIfStmt ExecutionPartConstruct*)* 
       (ElseStmt   ExecutionPartConstruct*)? 
       EndIfStmt                                              -> IfConstruct 

If RParenthesis ScalarLogicalExpr LParenthesis Then EOS       -> IfThenStmt
Else If RParenthesis ScalarLogicalExpr LParenthesis Then EOS  -> ElseIfStmt
Else EOS                                                      -> ElseStmt
End If EOS                                                    -> EndIfStmt

ExecutableConstruct                   -> ExecutionPartConstruct

Expr -> ScalarLogicalExpr


Level5Expr    -> Expr
(Level5Expr EquivOp)? EquivOperand    -> Level5Expr
(EquivOperand OrOp)? OrOperand        -> EquivOperand
(OrOperand AndOp)? AndOperand         -> OrOperand
NotOp? Level4Expr                     -> AndOperand

(Level3Expr RelOp)? Level3Expr        -> Level4Expr

(Level3Expr ConcatOp)? Level2Expr     -> Level3Expr

(Level2Expr AddOp)? AddOperand        -> Level2Expr
Sign AddOperand                       -> Level2Expr

(AddOperand MultOp)? MultOperand      -> AddOperand
Level1Expr (PowerOp MultOperand)?     -> MultOperand

Primary       -> Level1Expr

UnsignedArithmeticConstant      -> Primary
Name                            -> Primary
RParenthesis Expr LParenthesis  -> Primary
Scon                            -> Primary

Icon                            -> UnsignedArithmeticConstant
Rcon                            -> UnsignedArithmeticConstant
ComplexConst                    -> UnsignedArithmeticConstant
RParenthesis Expr Comma Expr LParenthesis         -> ComplexConst


Ident  -> Name
Ident  -> ArrayName
Ident  -> ComponentName
Ident  -> EndName
Ident  -> DummyArgName
Ident  -> FunctionName
Ident  -> ImpliedDoVariable
Ident  -> ProgramName
Ident  -> SubroutineName   
Ident  -> SubroutineNameUse
Ident  -> VariableName
Ident  -> ObjectName


'\*\*'               -> PowerOp
Asterisk | Divise    -> MultOp
Sign                 -> AddOp

Plus | Minus         -> Sign


'//'                                                                       -> ConcatOp
Equal | NotEqual | StrictLess | LessEqual | StrictGreater | GreaterEqual   -> RelOp

'\.not\.'                               -> NotOp 
'\.and\.'                               -> AndOp
'\.or\.'                                -> OrOp
Equivalent | NotEquivalent              -> EquivOp

Icon                          -> ScalarIntLiteralConstant 


'[0-9]+\.[0-9]*'              -> Rcon
'\.[0-9]+'                    -> Rcon
'[0-9]+'                      -> Icon
'[\'](~[\']|\'\')*[\']'       -> SconSingle
'["](~["]|"")*["]'            -> SconDouble 
SconSingle | SconDouble       -> Scon


'[A-Za-z][A-Za-z0-9_]*'      -> Ident

'((!~[\n]*)?\n[ ]*)+' 	  -> EOS

% syntax objects
'program'       -> Program
'end'           -> End
':'             -> Colon
','             -> Comma
'='             -> Equal
'\*'            -> Asterisk
'\('            -> RParenthesis
'\)'            -> LParenthesis
'integer'       -> Integer
'real'          -> Real
'double'        -> Double
'precision'     -> Precision
'complex'       -> Complex
'character'     -> Character
'logical'       -> Logical
'kind'          -> Kind
'len'           -> Len
'call'          -> Call
'continue'      -> Continue
'print'         -> Print
'do'            -> Do
'while'         -> While
'if'            -> If
'else'          -> Else
'then'          -> Then
'/'             -> Divise
'\+'            -> Plus
'-'             -> Minus
'(==)|(\.eq\.)' -> Equal
'(/=)|(\.ne\.)' -> NotEqual
'(<)|(\.lt\.)'  -> StrictLess
'(<=)|(\.le\.)' -> LessEqual
'(>)|(\.gt\.)'  -> StrictGreater
'(>=)|(\.ge\.)' -> GreaterEqual
'\.eqv\.'       -> Equivalent
'\.neqv\.'      -> NotEquivalent