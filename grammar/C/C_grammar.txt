Program -> Decl Decl_star
Decl_star -> Decl Decl_star | E

Decl -> VarDecl | FunDecl

VarDecl -> TypeSpec VarDeclInit Comma_VarDeclInit_star SemiColon

Comma_VarDeclInit_star -> Comma VarDeclInit Comma_VarDeclInit_star | E
VarDeclInit -> VarDeclId | VarDeclId Assign Expr
VarDeclId -> Id | Id LSquareBracket IntConst RSquareBracket

TypeSpec -> KwInt | KwBool | KwFloat | KwVoid

// no parameters for now
FunDecl -> TypeSpec Id LParenthesis RParenthesis CompoundStmt

CompoundStmt -> LBracket Stmt_star RBracket
Stmt_star -> Stmt Stmt_star | E

Stmt -> VarDecl | Assign SemiColon | IfStmt

VarAssign -> Id Assign Expr

IfStmt -> KwIf LParenthesis Expr RParenthesis CompoundStmt Else_If_star Else_opt
Else_If_star -> KwElse KwIf LParenthesis Expr RParenthesis CompoundStmt Else_If_star | E
Else_opt -> KwElse CompoundStmt | E
LParenthesis_Expr_RParenthesis_opt -> LParenthesis Expr RParenthesis | E

WhileStmt -> KwWhile LParenthesis Expr RParenthesis CompoundStmt
ForStmt -> KwFor LParenthesis VarAssign SemiColon Expr SemiColon Expr RParenthesis CompoundStmt


Expr -> Primary | Binary | InPlace | Unary
Primary -> LParenthesis Expr RParenthesis | Id | IntConst | FloatConst | BoolConst | NullConst


// --------------------- Binary
Binary -> LogOrExpr
LogOrExpr -> LogAndExpr LogicalOr_LogOrExpr_star
LogicalOr_LogOrExpr_star -> LogicalOr LogOrExpr LogicalOr_LogOrExpr_star | E

LogAndExpr -> BitorExpr LogicalAnd_LogAndExpr_star
LogicalAnd_LogAndExpr_star -> LogicalAnd LogAndExpr LogicalAnd_LogAndExpr_star | E

BitorExpr -> BitxorExpr BitwiseOr_BitorExpr_star
BitwiseOr_BitorExpr_star -> BitwiseOr BitorExpr BitwiseOr_BitorExpr_star | E

BitxorExpr -> BitandExpr BitwiseXor_BitxorExpr_star
BitwiseXor_BitxorExpr_star -> BitwiseXor BitxorExpr BitwiseXor_BitxorExpr_star | E

BitandExpr -> EqopExpr BitwiseAnd_BitandExpr_star
BitwiseAnd_BitandExpr_star -> BitwiseAnd BitandExpr BitwiseAnd_BitandExpr_star | E

EqopExpr -> RelopExpr Equal_or_NotEqual_EqopExpr_star
Equal_or_NotEqual_EqopExpr_star -> Equal_or_NotEqual EqopExpr Equal_or_NotEqual_EqopExpr_star | E
Equal_or_NotEqual -> Equal | NotEqual

RelopExpr -> ShiftExpr Comparator_RelopExpr_star
Comparator_RelopExpr_star -> Comparator RelopExpr Comparator_RelopExpr_star | E
Comparator -> Less | StrictLess | Greater | StrictGreater

ShiftExpr -> AddExpr BitShift_ShiftExpr_star
BitShift_ShiftExpr_star -> BitShift ShiftExpr BitShift_ShiftExpr_star | E
BitShift -> RightBitShift | LeftBitShift


AddExpr -> MultExpr Plus_or_Minus_AddExpr_star
Plus_or_Minus_AddExpr_star -> Plus_or_Minus AddExpr Plus_or_Minus_AddExpr_star | E
Plus_or_Minus -> Plus | Minus

MultExpr -> Unary Asterisk_or_Divide_or_Mod_MultExpr_star
Asterisk_or_Divide_or_Mod_MultExpr_star -> Asterisk_or_Divide_or_Mod MultExpr Asterisk_or_Divide_or_Mod_MultExpr_star | E
Asterisk_or_Divide_or_Mod -> Asterisk | Divide | Mod

// ----------------------- InPlace
InPlace -> Id InPlaceOperator Expr

InPlaceOperator -> InPlacePlus | InPlaceMinus | InPlaceTimes | InPlaceDivide | InPlaceMod | InPlaceLeftBitShift | InPlaceRightBitShift | InPlaceBitwiseAnd | InPlaceBitwiseOr | InPlaceBitwiseXor
InPlacePlus -> '+='
InPlaceMinus -> '-='
InPlaceTimes -> '*=' 
InPlaceDivide -> '/='
InPlaceMod -> '%='
InPlaceLeftBitShift -> '<<='
InPlaceRightBitShift -> '>>='
InPlaceBitwiseAnd -> '&='
InPlaceBitwiseOr -> '|='
InPlaceBitwiseXor -> '^='

Unary -> UnaryPlus | UnaryMinus | Unary1Scompl | UnaryLnot | UnaryRef | UnaryDeref | UnaryPreinc | UnaryPredec | UnaryPostinc | UnaryPostdec 
UnaryPostdec -> Primary Decr
UnaryPostinc -> Primary Incr
UnaryPredec -> Decr Primary
UnaryPreinc -> Incr Primary
UnaryDeref -> Asterisk Primary
UnaryRef -> BitwiseAnd Primary
UnaryLnot -> Not Primary
Unary1Scompl -> FstCompl Primary
UnaryMinus -> Minus Primary
UnaryPlus -> Plus Primary


Incr -> '++'
Decr -> '--'
Divide -> '/'
Plus -> '\+'
Minus -> '-'
Mod -> '%'
BitwiseAnd -> '&'
BitwiseOr -> '|'
BitwiseXor -> '^'
FstCompl -> '~'
Equal -> '=='
NotEqual -> '!='


LogicalAnd -> '&&'
LogicalOr -> '||'

Not -> '!'
Less -> '<='
StrictLess -> '<'
Greater -> '>='
StrictGreater -> '>'

RightBitShift -> '>>'
LeftBitShift -> '<<'


Id -> s'[a-zA-Z][a-zA-Z0-9_]*'
BoolConst -> True | False
True -> 'true'
False -> 'false'
IntConst -> r'[0-9]+'
FloatConst -> r'([0-9]+\.[0-9]*)|(\.[0-9]+)'

NullConst -> 'NULL'


KwElse -> 'else'
KwIf -> 'if'
KwWhile -> 'while'
KwFor -> 'for'

KwInt -> 'int'
KwFloat -> 'float'
KwBool -> 'bool'
KwVoid -> 'void'



Comma -> ','
SemiColon -> ';'
LParenthesis -> '\('
RParenthesis -> '\)'
LBracket -> '\{'
RBracket -> '\}'
LSquareBracket -> '\['
RSquareBracket -> '\]'
Comment -> r((//.*\n)|(/\*.*/\*))'
Identifier -> s'[A-Za-z][A-Za-z0-9_]*'
Asterisk -> '*'
Assign -> '='
Dot -> '\.'
Arrow -> '->'
